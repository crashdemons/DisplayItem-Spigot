/*
 *  This Source Code Form is subject to the terms of the Mozilla Public
 *  License, v. 2.0. If a copy of the MPL was not distributed with this
 *  file, You can obtain one at http://mozilla.org/MPL/2.0/ .
 */
package com.github.crashdemons.displayitem_spigot.plugins;

import static org.bukkit.Bukkit.getServer;
import org.bukkit.event.Listener;
import org.bukkit.plugin.Plugin;

/**
 * Defines an abstract third-party-plugin compatibility class which can detect
 * and retrieves the plugin instance.
 *
 * @author crashdemons (crashenator at gmail.com)
 */
public abstract class CompatiblePlugin implements Listener {

    private String pluginName = "";
    private boolean present = false;

    /**
     * The parent plugin requesting third-party plugin support.
     */
    protected Plugin parentPlugin = null;

    /**
     * Construct the plugin-compatibility object.
     * 
     * Overriding methods should not perform any actions that wouldn't work before plugins are loaded,
     * this is so that this can be called at parent plugin construction time.
     *
     * @param parentPlugin the current plugin requiring the compatibility (used
     * by child classes for events and logging)
     * @param pluginName the name of the third-party plugin to support
     */
    public CompatiblePlugin(Plugin parentPlugin, String pluginName) {
        this.parentPlugin = parentPlugin;
        this.pluginName = pluginName;
    }
    
    /**
     * Enable plugin support.
     * 
     * This method checks and sets the present of the plugin being supported - it is intended to be called from the parent plugin's onEnable method.
     * Overriding methods may perform any supported plugin methods on the condition that support was present.
     * @return whether the plugin is present and support is ready for use (by default it is always ready).
     */
    public boolean enable(){
        present = this.getPlugin() != null; //if the plugin name lookup returns null, the plugin is not present.
        if (!pluginName.isEmpty()) {
            String presence=present ? "support" : "not";
            parentPlugin.getLogger().info(pluginName + " " + presence + " detected.");
        }
        return isPresent() && isReady();
    }
    
    /**
     * Disable plugin support.
     * 
     * By default this method is a placeholder for overriding methods - it is intended to be called from the parent plugin's onDisable Method.
     */
    public void disable(){
        //placeholder for plugin class
    }
    
    

    /**
     * Get the plugin instance for the third-party plugin being supported.
     * This method has Bukkit look-up the plugin name every time it is called,
     * unless the plugin name is blank - you should use get() instead.
     *
     * @return the plugin instance, or null of the plugin name is blank
     */
    protected final Plugin getPlugin() {
        //System.out.println("get pluginName: "+pluginName);
        if (pluginName.isEmpty()) {
            return null;
        }
        return getServer().getPluginManager().getPlugin(pluginName);
    }

    /**
     * Whether the plugin compatibility class is ready to be used.
     * (By default this is the same state as isPresent unless overridden)
     *
     * @return whether the class is ready for use.
     */
    public boolean isReady() {
        return isPresent();
    }

    /**
     * Whether the supported third-party plugin was detected to be present on
     * the server.
     *
     * @return whether the plugin is present.
     */
    public boolean isPresent() {
        return present;
    }

    /**
     * Gets the proper name of the third-party plugin this class attempts to
     * support.
     *
     * @return the plugin name
     */
    public String getName() {
        return pluginName;
    }

    /**
     * Get the plugin instance for the third-party plugin being supported.
     * This method only looks up the plugin name with Bukkit if it was initially
     * detected to be present.
     *
     * @return the plugin instance, or null if the plugin was not present at
     * startup.
     */
    public Plugin get() {
        if (present) {//save bukkit map lookup, marginal time save in benchmarks.
            return getPlugin();
        }
        return null;
    }
    
    /**
     * Register all Bukkit events for the plugin support class.
     * 
     * In child classes, you should call this in the overrided enable() method if you need event support.
     */
    public void registerEvents(){
        getServer().getPluginManager().registerEvents(this, parentPlugin);
    }
}
